name: Publish to PyPI and TestPyPI

on:
  release:
    types: [released,prereleased]

jobs:

  lint:
    name: "Lint Check"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: "Ruff Lint Check"
        uses: astral-sh/ruff-action@v1

  format:
    name: "Format Check"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: "Ruff Format Check"
        uses: astral-sh/ruff-action@v1
        with:
          args: "format --diff"

  build:
    name: Build distribution
    needs:
      - lint
      - format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  sign:
    name: Sign and Attach Release Artifacts
    needs:
    - build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
    - name: Download the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ github.event.release.tag_name }}' dist/**
        --repo '${{ github.repository }}'

  publish-to-pypi:
    name: Publish to PyPI
    if: github.event.action == 'released'
    needs:
    - sign
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/ibwapi
    permissions:
      id-token: write
    steps:
    - name: Download the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  publish-to-testpypi:
    name: Publish to TestPyPI
    if: github.event.action == 'prereleased'
    needs:
    - sign
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/ibwapi
    permissions:
      id-token: write
    steps:
    - name: Download the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
